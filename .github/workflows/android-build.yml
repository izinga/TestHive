name: Build and Test with DeviceLab
on: [push, pull_request]

jobs:
  # Your existing build job (assuming it's named 'build')
  build:
    runs-on: ubuntu-22.04
    # Use a pre-configured Docker image with Android SDK, NDK, and Node.js
    container:
      image: reactnativecommunity/react-native-android:latest
    # container:
    #   image: python:3.10-slim

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install npm dependencies
        run: npm install

      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      - name: Build Android Release
        run: cd android && ./gradlew assembleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 1

  # Job 2: Build the DeviceLab service image
  build-devicelab-service:
    runs-on: ubuntu-latest
    needs: build # Wait for build job to complete
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      # Download the APK from build job
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create DeviceLab Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:22.04

          # Install basic dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*

          # Create Downloads directory and copy APK
          RUN mkdir -p /root/Downloads
          WORKDIR /root

          # Copy the built APK file
          COPY app-release.apk /root/Downloads/app-release.apk

          # Expose the Appium port
          EXPOSE 4723

          # Run the DeviceLab command directly
          CMD ["sh", "-c", "curl -fsSL https://app.devicelab.dev/node/jrOF1k3 | sh -s /root/Downloads/app-release.apk"]
          EOF

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/devicelab-proxy:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Run tests with DeviceLab service
  test-with-devicelab:
    runs-on: ubuntu-latest
    needs: [build, build-devicelab-service] # Wait for both build and service image

    # Use the built image as a service container
    services:
      devicelab-proxy:
        image: ghcr.io/${{ github.repository_owner }}/devicelab-proxy:${{ github.sha }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - '4723:4723'

    steps:
      - uses: actions/checkout@v4

      # - name: Verify service connectivity
      #   run: |
      #     echo "Testing DeviceLab proxy endpoints..."
      #     curl -v http://localhost:4723
      #     echo "âœ… Service is responding correctly!"
      #   continue-on-error: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          sleep 30
          cd TestHiveAppium-Python
          # python -m pip install --upgrade pip
          python3 -m venv env
          ls env/bin
          . env/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
          pip3 install -r requirements.txt
          pip3 freeze
          # python3 socketTest.py
          export HEALTH_CHECK_URL="http://localhost:4723/wd/hub"
          curl "$HEALTH_CHECK_URL"
          pytest
