name: Build Android App

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest
    # Use a pre-configured Docker image with Android SDK, NDK, and Node.js
    container:
      image: reactnativecommunity/react-native-android:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Java, Node, and NDK are pre-installed in the Docker image, so we don
      # - name: Print java version
      #   run: java --version
      # - name: Setup Maven Action
      #   uses: s4u/setup-maven-action@v1.7.0
      #   with:
      #     checkout-fetch-depth: 0
      #     java-version: 17
      #     maven-version: 3.9.10
      - name: Install npm dependencies
        run: npm install

      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      - name: Build Android Release
        run: cd android && ./gradlew assembleRelease

      - name: start devicelab test node
        run: curl -fsSL https://app.devicelab.dev/node/jrOF1k3 | sh -s android/app/build/outputs/apk/release/app-release.apk
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' #
      - name: Run Appium Tests with PyTest
        run: |
          cd TestHiveAppium-Python
          pip3 install -r requirements.txt
          export HEALTH_CHECK_URL="http://localhost:4723/"
          curl "$HEALTH_CHECK_URL"
          pytest

        # - name: Run Appium Tests with Maven
        #   run: |
        #     cd TestHiveAppium
        #     export HEALTH_CHECK_URL="http://localhost:4723/"
        #     curl "$HEALTH_CHECK_URL"
        #     mvn clean test
        continue-on-error: true
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TestHiveApp-Result
          path: |
            devicelab
            android/app/build/outputs/apk/release/app-release.apk
